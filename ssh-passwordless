Bastion: 
user : jumpuser 
password : 
sshd_config ---->/etc/ssh/sshd_config ( yes)
service sshd restart

jumpuser---sudoer---/etc/sudoers
========================
web1:
ec2-user-----user: devops
password: 
sshd_config ---->/etc/ssh/sshd_config ( yes)
service sshd restart

devops: sudoer

web2:
ec2-usr-----user: devops
password: 
sshd_config
devops: sudoer 




servce sshd restart 

=================================================

from our system login to bastion ---ec2-user---pem file
-pwd--->/home/ec2-user---->whoami--->
switch to root user: 
1)change server name(/etc/hostname and /etc/hosts, hostname -F /etc/hostname) 
--hostname---bastion
2)create the user: useradd jumpuser
set the password for the user: passwd jumpuser
change the other than the ec2-user configuation ( /etc/ssh/sshd_config)--restart ssh

3)make jumpuser as sudoer(/etc/sudoers)
exit the server from your local.

Login to the jump server using user: jumpuser---password
sudo su -
===============================================================
web1:
1)change the servername--web1
2)create the user: devops and make other than ec2-user
3)make this user as a sudoer
Test the login from source server: bastion to remoteserver: web1 , remoteuser: devops
ssh devops@privateipweb1


web2:
1)change the servername--web2
2)create the user: devops and make other than ec2-user
3)make this user as a sudoer
Test the login from source server: bastion to remoteserver: web1 , remoteuser: devops
ssh devops@privateipweb2

ssh-passwordless setup 
=======================
source: bastion
user: jumpuser
ssh-keygen ---->all enters
/home/jumpuser/.ssh ---->it create the folder of .ssh of your currnet user(jumpuser)
inside the .ssh(id_rsa(privatekey), id_rsa.pub(public key)) files will be there.

copy the public key to remote server:web1 and to remote user: devops
ssh-copyid devops@remoteserverip
--->it will cretates in the remote server(web1) of remote user(devops) /home/devops/.ssh
/authorized_keys file will creates.

authorized_keys file will have all of the remote servers and remote users public keys.

repeat the same procedure to web2 server, and same will happens with the authorized_keys


after copying of public key ( id_rsa.pub) test from source to remote server.

s: bastion
u: jumpuser

r: web1
u: devops

ssh devops@web1privateip ( ssh keys exchange)--it shouldnt ask password


r: web2
u: devops

ssh devops@web1privateip ( ssh keys exchange)--it shouldnt ask password

===================================================================================

s:laptop
u: laptopuser

r:bastion
u:jumpuser 
ssh jumpuser@publicipof bastion 

how do you setup the ssh-password less ?
how to copy the files to remote servers without password ?

setup the password less
ssh-key gen and copy the pub file to remote server and remote user.

ping <ipaddress> 
apache=pkg 
yum install httpd 

apache=service 
systemctl start httpd

hosts 
/etc/hosts--------xxxxxxxxxx
/etc/ansbile/hosts ----1000servers

[demoserver]
1
2
3
4
5
6
7
[otherserver]
8-1000

ansible -m ping demoserver -------->/etc/ansible/hosts
ansible -m yum name=httpd state=present demoserver
ansible -m service name=httpd state=started demoserver 



servername=slave2


echo "$servername" >/etc/hostname

privateip=$(hostname -i)

echo "$privateip $servername" >>/etc/hosts

hostname -F /etc/hostname
